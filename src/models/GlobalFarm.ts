import { PublicKey } from "@solana/web3.js";
import { u64 } from "@solana/spl-token";
import Decimal from "decimal.js";
import { constructSetEmissionsPerSecondIx } from "../instructions";

export default class GlobalFarm {
  publicKey: PublicKey;
  isInitialized: boolean;
  authority: PublicKey;
  nonce: number;
  tokenProgramId: PublicKey;
  emissionsAuthority: PublicKey;
  removeRewardsAuthority: PublicKey;
  baseTokenMint: PublicKey;
  baseTokenVault: PublicKey;
  rewardTokenVault: PublicKey;
  farmTokenMint: PublicKey;
  emissionsPerSecondNumerator: u64;
  emissionsPerSecondDenominator: u64;
  lastUpdatedTimestamp: u64;
  cumulativeEmissionsPerFarmToken: Decimal;

  constructor(params: {
    publicKey: PublicKey;
    isInitialized: boolean;
    authority: PublicKey;
    nonce: number;
    tokenProgramId: PublicKey;
    emissionsAuthority: PublicKey;
    removeRewardsAuthority: PublicKey;
    baseTokenMint: PublicKey;
    baseTokenVault: PublicKey;
    rewardTokenVault: PublicKey;
    farmTokenMint: PublicKey;
    emissionsPerSecondNumerator: u64;
    emissionsPerSecondDenominator: u64;
    lastUpdatedTimestamp: u64;
    cumulativeEmissionsPerFarmToken: Decimal;
  }) {
    this.publicKey = params.publicKey;
    this.isInitialized = params.isInitialized;
    this.tokenProgramId = params.publicKey;
    this.authority = params.authority;
    this.nonce = params.nonce;
    this.emissionsAuthority = params.emissionsAuthority;
    this.removeRewardsAuthority = params.removeRewardsAuthority;
    this.baseTokenMint = params.baseTokenMint;
    this.baseTokenVault = params.baseTokenVault;
    this.rewardTokenVault = params.rewardTokenVault;
    this.farmTokenMint = params.farmTokenMint;
    this.emissionsPerSecondNumerator = params.emissionsPerSecondNumerator;
    this.emissionsPerSecondDenominator = params.emissionsPerSecondDenominator;
    this.lastUpdatedTimestamp = params.lastUpdatedTimestamp;
    this.cumulativeEmissionsPerFarmToken =
      params.cumulativeEmissionsPerFarmToken;
  }

  constructSetEmissionsPerSecondIx(
    numerator: u64,
    denominator: u64,
    programId: PublicKey
  ) {
    return constructSetEmissionsPerSecondIx(
      this.emissionsAuthority,
      this.publicKey,
      this.baseTokenVault,
      programId,
      numerator,
      denominator
    );
  }

  toString() {
    return JSON.stringify(
      {
        publicKey: this.publicKey.toBase58(),
        isInitialized: this.isInitialized,
        authority: this.authority.toBase58(),
        nonce: this.nonce,
        tokenProgramId: this.tokenProgramId.toBase58(),
        emissionsAuthority: this.emissionsAuthority.toBase58(),
        removeRewardsAuthority: this.removeRewardsAuthority.toBase58(),
        baseTokenMint: this.baseTokenMint.toBase58(),
        baseTokenVault: this.baseTokenVault.toBase58(),
        rewardTokenVault: this.rewardTokenVault.toBase58(),
        farmTokenMint: this.farmTokenMint.toBase58(),
        emissionsPerSecondNumerator:
          this.emissionsPerSecondNumerator.toString(),
        emissionsPerSecondDenominator:
          this.emissionsPerSecondDenominator.toString(),
        lastUpdatedTimestamp: this.lastUpdatedTimestamp.toString(),
        cumulativeEmissionsPerFarmToken:
          this.cumulativeEmissionsPerFarmToken.toString(),
      },
      null,
      2
    );
  }
}

/**
 * @returns The PDA used for this Aquafarm instance (generated by using the same
 *  seeds as the smart contract: global farm state pubkey + saved nonce)
 */
export async function getAuthorityAndNonce(
  publicKey: PublicKey,
  programId: PublicKey
): Promise<[PublicKey, number]> {
  return PublicKey.findProgramAddress([publicKey.toBuffer()], programId);
}

export async function getGlobalFarmAddress(
  baseTokenMint: PublicKey,
  rewardTokenMint: PublicKey,
  funder: PublicKey,
  tokenProgramId: PublicKey,
  programId: PublicKey
): Promise<[PublicKey, number]> {
  return PublicKey.findProgramAddress(
    [
      baseTokenMint.toBuffer(),
      rewardTokenMint.toBuffer(),
      funder.toBuffer(),
      tokenProgramId.toBuffer(),
    ],
    programId
  );
}
